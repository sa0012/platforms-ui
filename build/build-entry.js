/**
 * build 生成组件的入口文件
 */

const fs = require('fs-extra')
const path = require('path')
// 驼峰命名插件, 用于组件名的驼峰命名
const uppercamelize = require('uppercamelcase')
// 引入组件库文件
const Components = require('./get-components')()
const packageJSON = require('../package.json')
const version = process.env.VERSION || packageJSON.version
// 打包提示语
const tips = '// This file is auto generated by build/build-entry.js'
// indexjs 文件路径
const filePath = path.join(__dirname, '../src/index.ts')

function buildEntry () {
  // 排除不需要安装的文件
  const uninstallComponents = ['IndexJs']
  // import导入的文件
  const importList = Components.map(name => `import ${uppercamelize(name)} from './${name}'`)
  // export 导出的文件名数组
  const exportList = Components.map(name => `${uppercamelize(name)}`)
  // 需要安装的文件
  const installList = exportList.filter(name => !~uninstallComponents.indexOf(uppercamelize(name)))
  const content =
`${tips}'
import { VueConstructor } from 'vue/types'
${importList.join('\n')}

declare global {
  interface Window {
    Vue?: VueConstructor;
  }
}

const version = '${version}'

const components = [
  ${installList.join(',\n  ')}
]

const install = (Vue: VueConstructor) => {
  components.forEach(Component => {
    Vue.use(Component)
  })
}

if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue)
}

export {
  install,
  version,
  ${installList.join(',\n  ')}
}

export default {
  install,
  version
}
`
  fs.writeFileSync(filePath, content)
}

buildEntry()
